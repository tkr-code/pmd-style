security:
    # https://symfony.com/doc/current/security/experimental_authenticators.html
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api/
            stateless: true
            provider:  app_user_provider
            lazy: true
            jwt: ~
            custom_authenticators:
                - App\Security\ApiKeyAuthenticator
            # custom_authenticator: App\Security\ApiKeyAuthenticator
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
        api_login:
            pattern: ^/api/login
            provider:  app_user_provider
            stateless: true
            json_login:
                check_path: /api/login
                # Gestion des connection personalisee
                success_handler: App\Security\CustomAuthenticationSuccessHandler
                failure_handler: App\Security\CustomAuthenticationFailureHandler
                # Gestion des connection automatique
                # success_handler: lexik_jwt_authentication.handler.authentication_success
                # failure_handler: lexik_jwt_authentication.handler.authentication_failure
        main:
            lazy: true
            provider:  app_user_provider
            custom_authenticator: App\Security\UserAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_USER }
        - { path: ^/my-account, roles: ROLE_USER }
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]
        ROLE_EDITOR: [ROLE_USER]

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon